package Moose::Cookbook::Meta::Recipe5;

# ABSTRACT: Adding a "table" attribute as a metaclass trait

__END__


=pod

=head1 SYNOPSIS

  package MyApp::Meta::Class::Trait::HasTable;
  use Moose::Role;

  has table => (
      is  => 'rw',
      isa => 'Str',
  );

  package Moose::Meta::Class::Custom::Trait::HasTable;
  sub register_implementation { 'MyApp::Meta::Class::Trait::HasTable' }

  package MyApp::User;
  use Moose -traits => 'HasTable';

  __PACKAGE__->meta->table('User');

=head1 DESCRIPTION

In this recipe, we'll create a class metaclass trait which has a "table"
attribute. This trait is for classes associated with a DBMS table, as one
might do for an ORM.

In this example, the table name is just a string, but in a real ORM
the table might be an object describing the table.

=head1 THE METACLASS TRAIT

This really is as simple as the recipe L</SYNOPSIS> shows. The trick is
getting your classes to use this metaclass, and providing some sort of sugar
for declaring the table. This is covered in
L<Moose::Cookbook::Extending::Recipe2>, which shows how to make a module like
C<Moose.pm> itself, with sugar like C<has_table()>.

=head2 Using this Metaclass Trait in Practice


Accessing this new C<table> attribute is quite simple. Given a class
named C<MyApp::User>, we could simply write the following:

  my $table = MyApp::User->meta->table;

As long as C<MyApp::User> has arranged to apply the
C<MyApp::Meta::Class::Trait::HasTable> to its metaclass, this method call just
works. If we want to be more careful, we can check that the class metaclass
object has a C<table> method:

  $table = MyApp::User->meta->table
      if MyApp::User->meta->can('table');

In theory, this is not entirely correct, since the metaclass might be getting
its C<table> method from a I<different> trait. In practice, you are unlikely
to encounter this sort of problem.

=head1 SEE ALSO

L<Moose::Cookbook::Meta::Recipe3> - Labels implemented via attribute
traits

=pod
